[tool.poetry]
name = "fastapi-study"
version = "0.1.0"
description = ""
authors = ["SHIMIZU Masato <m.shimizu@kakehashi.life>"]
readme = "README.md"


[tool.poetry.dependencies]
python = "3.12.1"
fastapi = "0.109.0"
uvicorn = { extras = ["standard"], version = "0.27.0" }
python-multipart = "0.0.6"
email-validator = "2.1.0.post1"


[tool.poetry.group.dev.dependencies]
pytest = "7.4.4"
taskipy = "1.12.2"
mypy = "1.8.0"
ruff = "0.7.1"
debugpy = "1.8.0"

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
select = ["ALL"]
ignore = [
    "T201",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "ANN101",
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.model_validator",
]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.File"]

# [tool.ruff.lint.flake8-annotations]
# mypy-init-return = true

[tool.taskipy.tasks]
start = "uvicorn fastapi_study.ch03.app:app --reload"
test = "pytest tests"
mypy = "mypy fastapi_study tests"
ruff = "task ruff-check && task ruff-format"
ruff-check = "ruff check fastapi_study --fix"
ruff-format = "ruff format fastapi_study"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
